// VERY GOOD EXAMPLE OF THE USE OF GTHE COMNPARATOR FUNCTION 
// QUESTION LINK --> https://leetcode.com/problems/sort-characters-by-frequency/description/?show=1

   static bool cmp(pair<char,int>a,pair<char,int>b){
        if(a.second==b.second){    // if the frequency of the character is same then we have to sort the string based on the charactor descending order.
            return a.first > b.first;
        }
        return a.second>b.second;  //it will sort the string based on the frequency as the second part of the map indicate the frequency .
    }
public:
    string frequencySort(string s) {
        unordered_map <char,int> um;  // Always use the unordered map gto get the frequency because its time complexity is O(1)
        for(auto m:s){   //logic to implement the frequency 
            um[m]++;
        }
        vector <pair<char,int>>vp;  //making a pair of the vector which store the charactor and its frequency in the given string. 
        for(auto m:s){
            vp.push_back({m,um[m]});
        }
        sort(vp.begin(),vp.end(),cmp);    //using inbuilt sort function and comparator function ;
        string st;
        for(auto m:vp){        //here pushing the charactors back from the map to string as a sorted way .
            st.push_back(m.first);
        }
        return st;
    }
